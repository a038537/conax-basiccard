Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2001 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  AES.DEF
Rem
Rem  Definition file for library AES: Advanced Encryption Standard
Rem
Rem  This library implements the Anvanced Encryption Standard defined in the
Rem  NIST publication "Draft Federal Information Processing Standard for the
Rem  AES". This document is available on the Internet, at
Rem  http://csrc.nist.gov/encryption/aes/.
Rem
Rem  One procedure is provided:
Rem
Rem      Function AES (Type%, Key$, Block$) As String
Rem
Rem  This function encrypts or decrypts the 16-byte Block$ with the given
Rem  Key$, acording to the Type% parameter:
Rem
Rem    Type%
Rem    -----
Rem     128   Encryption with 128-bit key. Len(Key$) must be >= 16.
Rem     192   Encryption with 192-bit key. Len(Key$) must be >= 24.
Rem     256   Encryption with 256-bit key. Len(Key$) must be >= 32.
Rem
Rem    -128   Decryption with 128-bit key. Len(Key$) must be >= 16.
Rem    -192   Decryption with 192-bit key. Len(Key$) must be >= 24.
Rem    -256   Decryption with 256-bit key. Len(Key$) must be >= 32.
Rem
Rem  The return value of the Function is the encrypted or decrypted Block$;
Rem  the contents of the original Block$ are not changed.

#IfNotDef AesDefIncluded ' Prevent multiple inclusion
Const AesDefIncluded = True

Rem  Error codes

Const AesBadType         = &H4601 ' Type% is not +/-128, +/-192, or +/-256
Const AesUnsupportedType = &H4602 ' Type% is +/-192 or +/-256 in a BasicCard
Const AesKeyTooShort     = &H4603 ' Key$ is less than 16/24/32 bytes long

#IfDef EnhancedBasicCard

#Library AES.LIB

#IfNotDef LibErrorDeclared
Const LibErrorDeclared = True
Public LibError As Integer
#EndIf

Declare Function RijndaelEncrypt128 (ReadOnly Key$, ReadOnly Data$) As String
Declare Function RijndaelDecrypt128 (ReadOnly Key$, ReadOnly Data$) As String

Function AES (ByVal Type%, ReadOnly Key$, ReadOnly Block$) As String

  If Len(Key$) < 16 Then LibError = AesKeyTooShort : Exit Function

  Private Data$ As String*16 : Data$ = Block$ ' Pad with zeroes if too short

  Select Case Type%
    Case 128 : AES = RijndaelEncrypt128 (Key$, Data$)
    Case -128 : AES = RijndaelDecrypt128 (Key$, Data$)
    Case 192, -192, 256, -256 : LibError = AesUnsupportedType
    Case Else : LibError = AesBadType
  End Select

End Function

#Else ' #IfNotDef EnhancedBasicCard

Declare Function &HC7 0 AES (ByVal Type%, ReadOnly Key$, ReadOnly Block$) As String

#EndIf ' #IfDef EnhancedBasicCard

#EndIf ' AesDefIncluded
