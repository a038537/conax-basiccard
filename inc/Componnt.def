#IfNotDef ComponntDefIncluded
Const ComponntDefIncluded = True

#Include AlgID.DEF
#Include LoadComm.def

Const ctFile        =  &H10
Const ctACR         =  &H20
Const ctPrivilege   =  &H30
Const ctFlag        =  &H40
Const ctKey         =  &H70

Rem  Access types

Const atRead     = &H01
Const atWrite    = &H02
Const atExecute  = &H04
Const atDelete   = &H08
Const atGrant    = &H10

Rem  Key usage values

Const kuVerify   = 1
Const kuExtAuth  = 2
Const kuSMEnc    = 3
Const kuSMMac    = 4
Const kuSign     = 5
Const kuIntAuth  = 6
Const kuSecTrans = 7

Rem  Flag Attribute bits

Const faPermanent      = &H02
Const faClearOnNewApp  = &H04
Const faClearOnCommand = &H08

Rem  LoadSequence phases
Const LoadSequenceStart = 1
Const LoadSequenceEnd   = 2
Const LoadSequenceAbort = 3

Rem DataItem@ values for WriteCardConfig and ReadCardConfig
Const CardConfigConfigAcr            = 1
Const CardConfigExecutableAcr        = 2
Const CardConfigMifareAcr            = 3
Const CardConfigATR                  = 4
Const CardConfigATS                  = 5
Const CardConfigRFClock              = 6
Const CardConfigClock                = 7
Const CardConfigUIDFlags             = 8
Const CardConfigInverseConvention    = 9
Const CardConfigDisableRF            = 10
Const CardConfigEnableMifare         = 11
Const CardConfigSAKATQA              = 12
Const CardConfigCardID               = 13
Const CardConfigDefaultApp           = 14
Const CardConfigECFilename           = 15
Const CardConfigECCurveName          = 16
Const CardConfigRsaFastPrKOps        = 17
Const CardConfigRsaDisableFastPrKOps = 18
Const CardConfigDSACompatibilityMode = 19
Const CardConfigReadConfiguredOnly   = &H80

Declare Sub      &HC9 &HA0 SelectApplication (filename$)
Declare Sub      &HC9 &HA2 CreateComponent (ByVal type@, name$, attr$, data$)
Declare Sub      &HC9 &HA4 DeleteComponent (ByVal CID%)
Declare Sub      &HC9 &HA6 WriteComponentAttr (ByVal CID%, attr$)
Declare Function &HC9 &HA8 ReadComponentAttr (ByVal CID%) As String
Declare Sub      &HC9 &HAA WriteComponentData (ByVal CID%, data$)
Declare Function &HC9 &HAC ReadComponentData (ByVal CID%) As String
Declare Function &HC9 &HAE FindComponent (ByVal type@, name$) As Integer
Declare Function &HC9 &HB0 ComponentName (ByVal CID%) As String
Declare Sub      &HC9 &HB2 GrantPrivilege (ByVal CID%, filename$)
Declare Function &HC9 &HB4 AuthenticateFile (ByVal KeyCID%, ByVal Algorithm@,_
                           Filename$, Signature$) As Integer
Declare Function &HC9 &HB6 ReadRightsList (Filename$, RightsList%()) As Integer
Declare Sub      &HC9 &HB8 LoadSequence (ByVal Phase@)
Declare Sub      &HC9 &HBC WriteCardConfig (ByVal DataItem@, ReadOnly Data$)
Declare Function &HC9 &HBE ReadCardConfig (ByVal DataItem@) As String

#IfDef TerminalProgram ' SecureTransport not available in card
  Declare Command &HC0 &HBA SecureTransport (ByVal Algorithm@, Nonce$, Disable Le)
#EndIf

Rem  LookupTime@ parameter in LCSerialNumber (LookupTime@) and
Rem  LCIndexedKey (LookupTime@, Index@) is one of the following:

Const ltCompileTime = 1
Const ltLoadTime    = 2

Rem  Component Library error codes

Const ceBadComponentName         = &H49C0
Const ceComponentNotFound        = &H49C1
Const ceAccessDenied             = &H49C2
Const ceComponentAlreadyExists   = &H49C3
Const ceBadComponentChain        = &H49C4
Const ceNameTooLong              = &H49C5
Const ceOutOfMemory              = &H49C6
Const ceInvalidACR               = &H49C7
Const ceBadComponentType         = &H49C8
Const ceCreateError              = &H49CA
Const ceWriteError               = &H49CB
Const ceKeyNotFound              = &H49CC
Const ceKeyUsage                 = &H49CD
Const ceKeyAlgorithm             = &H49CE
Const ceKeyDisabled              = &H49CF
Const ceTooManyTempFlags         = &H49D0
Const ceExecutabeAccessDenied    = &H49D1 ' Misspelt, but retained for backwards compatibility
Const ceExecutableAccessDenied   = &H49D1
Const ceApplicationNotFound      = &H49D2
Const ceACRDepth                 = &H49D3
Const ceBadComponentAttr         = &H49D4
Const ceBadComponentData         = &H49D5
Const ceBadAppFile               = &H49D6
Const ceLoadSequenceActive       = &H49D7
Const ceLoadSequenceNotActive    = &H49D8
Const ceLoadSequencePhase        = &H49D9
Const ceKeyTooShort              = &H49DA
Const ceUnknownAlgorithm         = &H49DB
Const ceBadEaxTag                = &H49DC
Const ceSecureTransportActive    = &H49DD
Const ceSecureTransportInactive  = &H49DE
Const ceComponentReferenced      = &H49DF
Const ceFileNotContiguous        = &H49E0
Const ceAppFileOpen              = &H49E1

Type DirectoryCreateAttributes
  ACRCID%
  Attributes@
End Type

Type DataFileCreateAttributes
  ACRCID%
  Attributes@
  BlockLen%
End Type

Type DirectoryWriteAttributes
  ACRCID%
End Type

Type DataFileWriteAttributes
  ACRCID%
End Type

Type DirectoryReadAttributes
  ACRCID%
  Attributes@
End Type

Type DataFileReadAttributes
  ACRCID%
  Attributes@
  BlockLen%
  FileLen%
End Type

Type AcrCreateAttributes
  ACRCID%
  AcrType@
End Type

Type AcrWriteAttributes
  ACRCID%
End Type

Type AcrReadAttributes
  ACRCID%
  AcrType@
End Type

Type PrivilegeAttributes
  ACRCID%
End Type

Type FlagAttributes
  ACRCID%
  Attributes@
End Type

Type KeyAttributes
  ACRCID%
  UsageMask%
  AlgorithmMask%
  ErrorCounter@
  ECResetValue@
End Type

Type ZC8KeyAttributes
  ACRCID%
  UsageMask%
  AlgorithmMask&
  ErrorCounter@
  ECResetValue@
End Type

#IfDef TerminalProgram

Rem  MultiApplication BasicCard variants of StartEncryption:
Declare Command &HC0 &H10 StartSMMac (Algorithm@)
Declare Command &HC0 &H10 StartSMEnc (Algorithm@, RAHi&, RALo&)

Rem  Further MultiApplication BasicCard security-related commands
Rem
Rem  To avoid name clashes with ISO commands, define NoISONames, either
Rem  with
Rem
Rem     Const NoISONames = True
Rem     #Include COMPONNT.DEF
Rem
Rem  or with the ZCMBASIC compiler command-line option -DNoISONames. The
Rem  MultiApplication BasicCard command names will then begin with "ZC":

#IfDef NoISONames
  Declare Command &HC0 &H40 ZCGetChallenge (Lc=0, Challenge$)
  Declare Command &HC0 &H42 ZCExternalAuthenticate (Algorithm@, ByVal Challenge$, Disable Le)
  Declare Command &HC0 &H44 ZCInternalAuthenticate (Algorithm@, Challenge$)
  Declare Command &HC0 &H46 ZCVerify (ByVal Password$, Disable Le)
#Else
  Declare Command &HC0 &H40 GetChallenge (Lc=0, Challenge$)
  Declare Command &HC0 &H42 ExternalAuthenticate (Algorithm@, ByVal Challenge$, Disable Le)
  Declare Command &HC0 &H44 InternalAuthenticate (Algorithm@, Challenge$)
  Declare Command &HC0 &H46 Verify (ByVal Password$, Disable Le)
#EndIf

Declare Command &HC0 &H48 GetFreeMemory (Lc=0, TotalFreeMemory%, LargestFreeBlock%)
Declare Command &HC0 &H4A GetFreeMemoryEx (Lc=0, TotalFreeMemory&, LargestFreeBlock&)

#EndIf ' TerminalProgram

#EndIf ' ComponntDefIncluded