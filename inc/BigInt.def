Rem BasicCard Big Integer Library
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2005 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  Function BigIntCompare (ReadOnly x$, ReadOnly y$) As Integer
Rem    Returns -1, 0, or 1 according as x is less than, equal to, or greater than y
Rem
Rem  Function BigIntAdd (ReadOnly x$, ReadOnly y$) As String
Rem    Returns x + y
Rem
Rem  Sub BigIntAddInPlace (x$, ReadOnly y$)
Rem    Computes x = x + y
Rem
Rem  Function BigIntSub (ReadOnly x$, ReadOnly y$, Negative%) As String
Rem    If x >= y, returns x - y, with Negative% = False (0).
Rem    If x < y, returns y - x, with Negative% = True (-1).
Rem
Rem  Sub BigIntSubInPlace (x$, ReadOnly y$, Negative%)
Rem    If x >= y, computes x= x - y, with Negative% = False (0).
Rem    If x < y, computes x = y - x, with Negative% = True (-1).
Rem
Rem  Function BigIntMul (ReadOnly x$, ReadOnly y$) As String
Rem    Returns x * y
Rem
Rem  Sub BigIntMulInPlace (x$, ReadOnly y$)
Rem    Computes x = x * y
Rem
Rem  Function BigIntDiv (ReadOnly x$, ReadOnly y$) As String
Rem    Returns x / y
Rem
Rem  Sub BigIntDivInPlace (x$, ReadOnly y$)
Rem    Computes x = x / y
Rem
Rem  Function BigIntRem (ReadOnly x$, ReadOnly y$) As String
Rem    Returns x Mod y
Rem
Rem  Sub BigIntRemInPlace (x$, ReadOnly y$)
Rem    Computes x = x Mod y
Rem
Rem  Sub BigIntDivRemInPlace (x$, y$)
Rem    Computes x = x / y and y = x Mod y
Rem
Rem  Function BigIntShiftLeft (ReadOnly x$, ByVal Shift%) As String
Rem    Returns x Shl Shift%.  If Shift% is negative, LibError is set to BigIntNegativeShift.
Rem
Rem  Sub BigIntShiftLeftInPlace (x$, ByVal Shift%)
Rem    Computes x = x Shl Shift%.  If Shift% is negative, LibError is set to BigIntNegativeShift.
Rem
Rem  Function BigIntShiftRight (ReadOnly x$, ByVal Shift%) As String
Rem    Returns x Shr Shift%. If Shift% is negative, LibError is set to BigIntNegativeShift.
Rem
Rem  Sub BigIntShiftRightInPlace (x$, ByVal Shift%)
Rem    Computes x = x Shr Shift%.  If Shift% is negative, LibError is set to BigIntNegativeShift.
Rem
Rem  Function BigIntAnd (ReadOnly x$, ReadOnly y$) As String
Rem    Returns bitwise x And y
Rem
Rem  Sub BigIntAndInPlace (x$, ReadOnly y$)
Rem    Computes bitwise x = x And y
Rem
Rem  Function BigIntOr (ReadOnly x$, ReadOnly y$) As String
Rem    Returns bitwise x Or y
Rem
Rem  Sub BigIntOrInPlace (x$, ReadOnly y$)
Rem    Computes bitwise x = x Or y
Rem
Rem  Function BigIntXor (ReadOnly x$, ReadOnly y$) As String
Rem    Returns bitwise x Xor y
Rem
Rem  Sub BigIntXorInPlace (x$, ReadOnly y$)
Rem    Computes bitwise x = x Xor y
Rem
Rem  Function BigIntPower (ReadOnly x$, ReadOnly e$, ReadOnly n$) As String
Rem    Returns x^e mod n
Rem
Rem  Sub BigIntPowerInPlace (x$, ReadOnly e$, ReadOnly n$)
Rem    Computes x = x^e mod n
Rem
Rem  Function BigIntHCF (ReadOnly x$, ReadOnly y$) As String
Rem    Returns HCF (x, y)
Rem
Rem  Sub BigIntHCFInPlace (x$, ReadOnly y$)
Rem    Computes x = HCF (x, y)
Rem
Rem  Function BigIntInvert (ReadOnly x$, ReadOnly n$) As String
Rem    Returns inverse of x mod n. If the inversion fails, LibError is set to
Rem    BigIntInversionFailed, and the HCF of x and n is returned.
Rem
Rem  Sub BigIntInvertInPlace (x$, ReadOnly n$)
Rem    Computes x = inverse of x mod n. If the inversion fails, LibError is set to
Rem    BigIntInversionFailed, and the HCF of x and n is returned in x.
Rem
Rem  Function BigIntSquareRoot (ReadOnly x$, ReadOnly p$) As String
Rem    Returns a square root of x mod p, i.e. a number 0 <= y < p such that
Rem    y^2 = x mod p. If x has no square root mod p, LibError is set to
Rem    BigIntSquareRootFailed, then 0 is returned. p must be an odd prime number.
Rem
Rem  Sub BigIntSquareRootInPlace (x$, ReadOnly p$)
Rem    Computes x = square root of x mod p. If x has no square root mod p,
Rem    LibError is set to BigIntSquareRootFailed, then 0 is returned.
Rem    p must be an odd prime number.
Rem
Rem  Function BigIntJacobiSymbol (ReadOnly a$, ReadOnly m$) As Integer
Rem    Returns the Jacobi symbol (a/m). If m is prime, this is 0 if a = 0,
Rem    +1 if a has a square root mod m, and -1 otherwise.

#IfNotDef BigIntDefIncluded ' Prevent multiple inclusion
Const BigIntDefIncluded = True

Declare Function &HCF  1 BigIntCompare (ReadOnly x$, ReadOnly y$) As Integer
Declare Function &HCF  2 BigIntAdd (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF  3 BigIntAddInPlace (x$, ReadOnly y$)
Declare Function &HCF  4 BigIntSub (ReadOnly x$, ReadOnly y$, Negative%) As String
Declare Sub      &HCF  5 BigIntSubInPlace (x$, ReadOnly y$, Negative%)
Declare Function &HCF  6 BigIntMul (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF  7 BigIntMulInPlace (x$, ReadOnly y$)
Declare Function &HCF  8 BigIntDiv (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF  9 BigIntDivInPlace (x$, ReadOnly y$)
Declare Function &HCF 10 BigIntRem (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF 11 BigIntRemInPlace (x$, ReadOnly y$)
Declare Sub      &HCF 12 BigIntDivRemInPlace (x$, y$)
Declare Function &HCF 13 BigIntShiftLeft (ReadOnly x$, ByVal Shift%) As String
Declare Sub      &HCF 14 BigIntShiftLeftInPlace (x$, ByVal Shift%)
Declare Function &HCF 15 BigIntShiftRight (ReadOnly x$, ByVal Shift%) As String
Declare Sub      &HCF 16 BigIntShiftRightInPlace (x$, ByVal Shift%)
Declare Function &HCF 17 BigIntAnd (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF 18 BigIntAndInPlace (x$, ReadOnly y$)
Declare Function &HCF 19 BigIntOr (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF 20 BigIntOrInPlace (x$, ReadOnly y$)
Declare Function &HCF 21 BigIntXor (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF 22 BigIntXorInPlace (x$, ReadOnly y$)
Declare Function &HCF 23 BigIntPower (ReadOnly x$, ReadOnly e$, ReadOnly n$) As String
Declare Sub      &HCF 24 BigIntPowerInPlace (x$, ReadOnly e$, ReadOnly n$)
Declare Function &HCF 25 BigIntHCF (ReadOnly x$, ReadOnly y$) As String
Declare Sub      &HCF 26 BigIntHCFInPlace (x$, ReadOnly y$)
Declare Function &HCF 27 BigIntInvert (ReadOnly x$, ReadOnly n$) As String
Declare Sub      &HCF 28 BigIntInvertInPlace (x$, ReadOnly n$)
Declare Function &HCF 29 BigIntSquareRoot (ReadOnly x$, ReadOnly p$) As String
Declare Sub      &HCF 30 BigIntSquareRootInPlace (x$, ReadOnly p$)
Declare Function &HCF 31 BigIntJacobiSymbol (ReadOnly a$, ReadOnly m$) As Integer
                   
Rem  Error codes                    
Const BigIntDivideByZero     = &H4F01
Const BigIntOverflow         = &H4F02
Const BigIntNegativeShift    = &H4F03
Const BigIntInversionFailed  = &H4F04
Const BigIntOperandTooBig    = &H4F05
Const BigIntInvalidOperand   = &H4F06
Const BigIntSquareRootFailed = &H4F07

#EndIf ' BigIntDefIncluded
