Rem  Crypto.def
Rem
Rem  Definition file for library Crypto: Cryptographic operations
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2009 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------
Rem
Rem DES Key Parity
Rem
Rem    Function CryptoCheckDESKeyParity (ReadOnly Key$)
Rem    Sub CryptoSetDESKeyParity (Key$)
Rem
Rem Message Authentication
Rem
Rem    Sub CryptoMAC (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, ReadOnly Data$, MAC As String)
Rem    Sub CryptoMACStart (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$)
Rem    Sub CryptoMACUpdate (ReadOnly Data$)
Rem    Sub CryptoMACEnd (MAC As String)
Rem
Rem Encryption/Decryption
Rem
Rem    Sub CryptoEncrypt (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, Data$)
Rem    Sub CryptoDecrypt (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, Data$)
Rem
Rem Secure Messaging
Rem
Rem Secure Messaging - Terminal Program
Rem
Rem    User-controlled Secure Messaging:
Rem
Rem       Sub CryptoSMEncryptCommand (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$,_
Rem          CLA@, ByVal INS@, ByVal P1P2%, IDATA$, Le%)
Rem       Sub CryptoSMDecryptResponse (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, ODATA$, SW1SW2%)
Rem
Rem    Automatic Secure Messaging:
Rem
Rem       Sub CryptoSMEnable (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$)
Rem       Sub CryptoSMConfigure (ReadOnly SMSpec())
Rem       Sub CryptoSMDisable()
Rem
Rem Secure Messaging - BasicCard program
Rem
Rem    User-controlled Secure Messaging:
Rem
Rem       Function CryptoSMDecryptCommand (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$,_
Rem          CLA@, ByVal INS@, ByVal P1P2%, IDATA$, Le%)
Rem       Sub CryptoSMEncryptResponse (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, ODATA$, SW1SW2%)
Rem
Rem    Automatic Secure Messaging:
Rem
Rem       Sub CryptoSMEnable (ReadOnly SMSpec(),_
Rem          ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, Immediate%)
Rem       Sub CryptoSMConfigure (ReadOnly SMSpec())
Rem       Sub CryptoSMDisable (Immediate%)
Rem       Function CryptoSMStatus()
Rem
Rem Customer Key Derivation from Master Key (BasicCard):
Rem
Rem       Sub CryptoSetKDP (ReadOnly KDP$)
Rem
Rem Customer Key setting (Terminal):
Rem
Rem       Sub CryptoSetCustomerKey (ReadOnly Key$)

#IfNotDef CryptoDefIncluded ' Prevent multiple inclusion
Const CryptoDefIncluded = True

Rem  Error codes
Const CryptoBadAlgorithm        = &H5001
Const CryptoKeyTooShort         = &H5002
Const CryptoInvalidIV           = &H5003
Const CryptoPartialBlock        = &H5004
Const CryptoDataTooLong         = &H5005
Const CryptoDataTooShort        = &H5006
Const CryptoBadPadding          = &H5007
Const CryptoBadCMACParams       = &H5008
Const CryptoMacState            = &H5009
Const CryptoInvalidCLA          = &H500A
Const CryptoKeyTooLong          = &H500B
Const CryptoSMError             = &H5080
Const CryptoSMInvalidSpec       = &H5081
Const CryptoSMEmptyResponse     = &H5082
Const CryptoSMInvalidResponse   = &H5083
Const CryptoSMMissingMAC        = &H5084
Const CryptoSMInvalidMAC        = &H5085
Const CryptoSMDuplicateMAC      = &H5086
Const CryptoSMInvalidPadding    = &H5087
Const CryptoSMNotActive         = &H5088
Const CryptoSMSpecTooLong       = &H5089
Const CryptoSMEncrypting        = &H508A
Const CryptoSMCommsError        = &H508B
Const CryptoSSCLengthMismatch   = &H508C

Rem  Block Cipher algorithms
Const CryptoAlgSingleDES = &H0011
Const CryptoAlg2TDES     = &H0012 ' 2-key Triple DES
Const CryptoAlg3TDES     = &H0013 ' 3-key Triple DES

Const CryptoAlgAES128    = &H0021
Const CryptoAlgAES192    = &H0022
Const CryptoAlgAES256    = &H0023

Rem  Authentication modes
Const MacModeCBCMAC      = &H0100
Const MacModeRetailMAC   = &H0200
Const MacModeCMAC        = &H0300 ' Same as the OMAC algorithm
Const MacModeEMAC        = &H0400

Rem  Encryption modes
Const EncModeCBC         = &H0100
Const EncModeCFB         = &H0200
Const EncModeOFB         = &H0300

Rem  IV
Const CryptoIVPlain      = &H1000
Const CryptoIVEncrypted  = &H2000
Const CryptoIVNone       = &H3000

Rem  Padding suppression
Const CryptoNoPadding    = &H8000

Rem  SMItem type in bits 10-9
Const SMItemTypeMask     = &H0300
  Const SMItemData         = &H0100 ' Plain or Encrypted data
  Const SMItemMAC          = &H0200 ' MAC
  Const SMItemTrailer      = &H0300 ' Le for commands; SW1-SW2 for responses

Rem  SMItem flag bits
Const SMItemCommandOnly  = &H0400
Const SMItemResponseOnly = &H0800
Const SMItemLength       = &H1000
Const SMItemPI           = &H2000
Const SMItemSkipMAC      = &H4000
Const SMItemConditional  = &H8000 ' Condition follows
  Const SMConditionNonEmpty         = &H0001
  Const SMConditionLengthIsMin      = &H0002
  Const SMConditionLengthIsMax      = &H0004
  Const SMConditionEmptyResponse    = &H0008
  Const SMConditionNonEmptyResponse = &H0010

Rem  Secure Messaging options
Const SMIncludeHeaderInMac = &H01 ' CLA INS P1 P2 is included in MAC
Const SMMacChained         = &H10 ' MAC IV is the previous MAC
Const SMMacPreIncSSC       = &H20 ' MAC IV is a pre-incremented Send Sequence Counter
Const SMEncPreIncSSC       = &H40 ' ENC IV is a pre-incremented Send Sequence Counter
Const SMCommonPreIncSSC    = &H80 ' MAC and ENC use the same pre-incremented Send Sequence Counter

Rem  Secure Messaging status
Const SMStatusActive      = &H01
Const SMStatusHeaderInMAC = &H02
Const SMStatusCryptogram  = &H04
Const SMStatusPlaintext   = &H08
Const SMStatusTrailer     = &H10
Const SMStatusMAC         = &H20
                         
Rem  DES Key Parity
Declare Function &HD0 &H01 CryptoCheckDESKeyParity (ReadOnly Key$)
Declare Sub &HD0 &H02 CryptoSetDESKeyParity (Key$)

Rem  Message Authentication
Declare Sub &HD0 &H11 CryptoMAC (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, ReadOnly Data$, MAC As String)
Declare Sub &HD0 &H12 CryptoMACStart (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$)
Declare Sub &HD0 &H13 CryptoMACUpdate (ReadOnly Data$)
Declare Sub &HD0 &H14 CryptoMACEnd (MAC As String)

Rem  Encryption/Decryption
Declare Sub &HD0 &H21 CryptoEncrypt (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, Data$)
Declare Sub &HD0 &H22 CryptoDecrypt (ByVal Algorithm%, ReadOnly Key$, ReadOnly IV$, Data$)

#IfDef TerminalProgram

Rem  Per-message Secure Messaging
Declare Sub &HD0 &H31 CryptoSMEncryptCommand (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$,_
  CLA@, ByVal INS@, ByVal P1P2%, IDATA$, Le%)
Declare Function &HD0 &H32 CryptoSMDecryptResponse (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, ODATA$, SW1SW2%)

Rem  Automatic Secure Messaging
Declare Sub &HD0 &H41 CryptoSMEnable (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$)
Declare Sub &HD0 &H42 CryptoSMConfigure (ReadOnly SMSpec())
Declare Sub &HD0 &H43 CryptoSMDisable()
Declare Function &HD0 &H44 CryptoSMStatus()

Rem Key Derivation from Master Key
Declare Sub &HD0 &H51 CryptoSetCustomerKey (ReadOnly Key$)

#ElseIf CardMajorVersion >= 7

Rem  Per-message Secure Messaging
Declare Function &HD0 &H33 CryptoSMDecryptCommand (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$,_
  CLA@, ByVal INS@, ByVal P1P2%, IDATA$, Le%)
Declare Sub &HD0 &H34 CryptoSMEncryptResponse (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, ODATA$, SW1SW2%)

Rem  Automatic Secure Messaging
Declare Sub &HD0 &H41 CryptoSMEnable (ReadOnly SMSpec(),_
  ReadOnly MacKey$, MacIV$, ReadOnly EncKeys$, EncIV$, ByVal Immediate%)
Declare Sub &HD0 &H42 CryptoSMConfigure (ReadOnly SMSpec())
Declare Sub &HD0 &H43 CryptoSMDisable (ByVal Immediate%)
Declare Function &HD0 &H44 CryptoSMStatus()

Rem Customer Key Derivation from Master Key
Declare Sub &HD0 &H50 CryptoSetKDP (ReadOnly KDP$)

#EndIf

Rem  Constant strings for Customer Key testing

Const CryptoExampleKDP$ = Chr$(_
  &H3F,&H18,&HEC,&HB9,&H66,&H95,&H5E,&H70,&H70,&H5B,&HE0,&HAF,&H34,&H58,&H62,&H39,_
  &HD0,&H0D,&H3D,&HFC,&H26,&HDF,&H0E,&H22,&H86,&HBD,&H35,&H0A,&HFE,&H71,&H82,&HFE)

Const CryptoExampleCustomerKey$ = Chr$(_
  &HD7,&HEE,&H00,&H2F,&H1C,&HCA,&H3C,&H59,&HF0,&H40,&H48,&HFC,&H88,&H78,&H51,&H60,_
  &H3C,&H0B,&HB4,&H08,&HD8,&H3B,&HF5,&HB5,&HAC,&H51,&H62,&HCF,&H76,&H86,&H04,&HAB)

Const CryptoExampleSimulatedMasterKey$ = Chr$(_
  &H0A,&HC5,&H68,&H68,&H3A,&HFC,&HD8,&H86,&H89,&H8E,&H5F,&H91,_
  &HE8,&H5E,&HBB,&HD0,&HED,&H81,&H58,&H6E,&H41,&H98,&H29,&H9E)

Const CryptoExampleSimulatedCustomerKey$ = Chr$(_
  &HD3,&HD9,&HF1,&H76,&HD5,&HD2,&H8A,&HD4,&H8F,&H86,&H02,&H94,&H7F,&H70,&HF7,&HCA,_
  &H93,&H72,&H6F,&HCB,&H45,&HFC,&HD3,&H81,&H7E,&HAC,&H3B,&H20,&HF5,&HAD,&HB6,&HBA)

#EndIf ' CryptoDefIncluded