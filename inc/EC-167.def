Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2005 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  EC-167.DEF
Rem
Rem  Definition file for the 167-bit Elliptic Curve library EC-167
Rem
Rem  INITIALISATION PROCEDURES
Rem  =========================
Rem
Rem  Sub EC167SetCurve (Params As EC167DomainParams) ' Terminal program only
Rem
Rem      Specify the domain parameters for the Elliptic Curve. (These will
Rem      usually come from a file generated by ZeitControl software.)
Rem
Rem  Sub EC167SetCurve (ParamFile$) ' MultiApplication BasicCard only
Rem
Rem      Specify a file containing domain parameters for the Elliptic Curve.
Rem
Rem  Sub EC167GenerateKeyPair (Seed$) ' Terminal and Professional BasicCard
Rem  Sub EC167GenerateKeyPair (PrivateKey$, PublicKey$) ' MultiApplication
Rem
Rem      Generate a private-key/public-key pair, saving the results in the
Rem      Eeprom variables EC167PrivateKey and EC167PublicKey (or in the
Rem      procedure parameters PrivateKey$, PublicKey$ in a MultiApplication
Rem      BasicCard).
Rem
Rem  Sub EC167SetPrivateKey (PrivateKey$) ' Terminal and Professional BasicCard
Rem
Rem      Compute a public key from a specific private key, saving the results
Rem      in the Eeprom variables EC167PrivateKey and EC167PublicKey
Rem
Rem  Function EC167MakePublicKey (PrivateKey$) As String ' MultiApplication
Rem
Rem      Compute a public key from a specific private key
Rem
Rem  CRYPTOGRAPHIC SCHEMES
Rem  =====================
Rem
Rem  Function EC167SessionKey (KDP$, SharedSecret$) As String
Rem
Rem      Generate a 20-byte session key from the Key Derivation Parameters KDP$
Rem      and the given SharedSecret$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the scheme ECKAS-DH1:
Rem      Elliptic Curve Key Agreement Scheme, Diffie-Hellman version, where
Rem      each party contributes one key pair.
Rem
Rem  Function EC167HashAndSignNR (Data$) As String ' Terminal and Professional
Rem  Function EC167HashAndSignNR (PrivateKey$, Data$) As String ' MultiApplication
Rem  Function EC167HashAndSignDSA (Data$) As String ' Terminal and Professional
Rem  Function EC167HashAndSignDSA (PrivateKey$, Data$) As String ' MultiApplication
Rem
Rem      Compute the SHA-1 hash of the given data, and sign it with
Rem      EC167SignNR or EC167SignDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Generation Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  Function EC167HashAndVerifyNR (Signature$, Data$, PublicKey$)
Rem  Function EC167HashAndVerifyDSA (Signature$, Data$, PublicKey$)
Rem
Rem      Compute the SHA-1 hash of the given message, and verify the
Rem      signature with EC167VerifyNR or EC167VerifyDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Verification Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  CRYPTOGRAPHIC PRIMITIVES
Rem  ========================
Rem
Rem  Function EC167SharedSecret (PublicKey$) As String ' Terminal and Professional
Rem  Function EC167SharedSecret (PrivateKey$, PublicKey$) As String ' MultiApplication
Rem
Rem      Generate the shared secret corresponding to the given PublicKey$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive
Rem      ECSVDP-DHC: Elliptic Curve Secret Value Derivation Primitive,
Rem      Diffie-Hellman version with cofactor multiplication.
Rem
Rem  Function EC167SignNR (Hash$) As String ' Terminal and Professional
Rem  Function EC167SignNR (PrivateKey$, Hash$) As String ' MultiApplication
Rem
Rem      Compute the Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-NR:
Rem      Elliptic Curve Signature Primitive, Nyberg-Rueppel version.
Rem
Rem  Function EC167SignDSA (Hash$) As String ' Terminal and Professional
Rem  Function EC167SignDSA (PrivateKey$, Hash$) As String ' MultiApplication
Rem
Rem      Compute the DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-DSA:
Rem      Elliptic Curve Signature Primitive, DSA version.
Rem
Rem  Function EC167VerifyNR (Signature$, Hash$, PublicKey$)
Rem
Rem      Verify a Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-NR:
Rem      Elliptic Curve Verification Primitive, Nyberg-Rueppel version.
Rem
Rem  Function EC167VerifyDSA (Signature$, Hash$, PublicKey$)
Rem
Rem      Verify a DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-DSA:
Rem      Elliptic Curve Verification Primitive, DSA version.

Rem  For backwards compatibility, the following alternative names are provided:
Rem
Rem    EC167HashAndSign for EC167HashAndSignNR
Rem    EC167HashAndVerify for EC167HashAndVerifyNR
Rem    EC167Sign for EC167SignNR
Rem    EC167Verify for EC167VerifyNR
Rem
Rem  This costs us no extra space, because uncalled procedures are discarded by the compiler.

#IfNotDef EC167DefIncluded ' Prevent multiple inclusion
Const EC167DefIncluded = True

#IfDef CardMajorVersion
  #If CardMajorVersion < 5
    #Error The EC167 library is not available for this card
  #EndIf
#EndIf

#Include SHA.DEF

Type EC167DomainParams
  a As Byte
  b As String*21
  r As String*21
  G As String*21
End Type

Rem  LibError codes

Const EC167BadCurveParams      = &H4701
Const EC167CurveNotInitialised = &H4702
Const EC167KeyNotInitialised   = &H4703
Const EC167BadProcParams       = &H4704
Const EC167CurveMismatch       = &H4705
Const EC167DataNotFound        = &H4706
Const EC167FileNotContigous    = &H4707 ' Misspelling retained for backwards compatibility
Const EC167FileNotContiguous   = &H4707
Const EC167FileNotFound        = &H4708
Const EC167FileOpen            = &H4709

#IfDef TerminalProgram
  Const EC167MultiAppInterface = False
#ElseIf CardMajorVersion >= 6
  Const EC167MultiAppInterface = True
#Else
  Const EC167MultiAppInterface = False
#EndIf

#If EC167MultiAppInterface

  Declare Sub      &HC8 1 EC167SetCurve (ReadOnly filename$)
  Declare Function &HC8 3 EC167SharedSecret (ReadOnly PrivateKey$, ReadOnly PublicKey$) As String
  Declare Function &HC8 4 EC167SignNR (ReadOnly PrivateKey$, ReadOnly Hash$) As String
  Declare Function &HC8 4 EC167Sign (ReadOnly PrivateKey$, ReadOnly Hash$) As String ' Alternative name
  Declare Function &HC8 5 EC167VerifyNR (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)
  Declare Function &HC8 5 EC167Verify (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$) ' Alternative name
  Declare Function &HC8 6 EC167MakePublicKey (ReadOnly PrivateKey$) As String
  Declare Function &HC8 7 EC167SignDSA (ReadOnly PrivateKey$, ReadOnly Hash$) As String
  Declare Function &HC8 8 EC167VerifyDSA (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)

  Function EC167HashAndSignNR (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC167HashAndSignNR = EC167SignNR (PrivateKey$, ShaHash (Data$))
  End Function

  Rem  Alternative name EC167HashAndSign
  Function EC167HashAndSign (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC167HashAndSign = EC167SignNR (PrivateKey$, ShaHash (Data$))
  End Function

  Function EC167HashAndSignDSA (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC167HashAndSignDSA = EC167SignDSA (PrivateKey$, ShaHash (Data$))
  End Function

  #If CardMajorVersion >= 7
    Declare Sub      &HC8 9  EC167SetCurveIndex (CurveIndex%)
    Declare Function &HC8 10 EC167GetCurve() As EC167DomainParams
  #EndIf

#Else

  Eeprom EC167PrivateKey As String*21
  Eeprom EC167PublicKey As String*21

  Declare Sub      &HC8 1 EC167SetCurve (ByVal Params As EC167DomainParams)
  Declare Sub      &HC8 2 EC167SetPrivateKey (ReadOnly Key$)
  Declare Function &HC8 3 EC167SharedSecret (ReadOnly PublicKey$) As String
  Declare Function &HC8 4 EC167SignNR (ReadOnly Hash$) As String
  Declare Function &HC8 4 EC167Sign (ReadOnly Hash$) As String ' Alternative name
  Declare Function &HC8 5 EC167VerifyNR (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)
  Declare Function &HC8 5 EC167Verify (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$) ' Alternative name
  Declare Function &HC8 7 EC167SignDSA (ReadOnly Hash$) As String
  Declare Function &HC8 8 EC167VerifyDSA (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)

  Function EC167HashAndSignNR (ReadOnly Data$) As String
    EC167HashAndSignNR = EC167SignNR (ShaHash (Data$))
  End Function

  Rem  Alternative name EC167HashAndSign
  Function EC167HashAndSign (ReadOnly Data$) As String
    EC167HashAndSign = EC167SignNR (ShaHash (Data$))
  End Function

  #If EC167SignDSA ' If system procedure is available in this machine
    Function EC167HashAndSignDSA (ReadOnly Data$) As String
      EC167HashAndSignDSA = EC167SignDSA (ShaHash (Data$))
    End Function
  #EndIf

#EndIf

#If EC167Verify ' If system procedure is available in this machine

Function EC167HashAndVerifyNR (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = ShaHash (Data$)
  EC167HashAndVerifyNR = EC167VerifyNR (Signature$, Hash$, PublicKey$)
End Function

Rem  Alternative name EC167HashAndVerify
Function EC167HashAndVerify (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = ShaHash (Data$)
  EC167HashAndVerify = EC167VerifyNR (Signature$, Hash$, PublicKey$)
End Function

#EndIf

#If EC167VerifyDSA ' If system procedure is available in this machine

Function EC167HashAndVerifyDSA (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = ShaHash (Data$)
  EC167HashAndVerifyDSA = EC167VerifyDSA (Signature$, Hash$, PublicKey$)
End Function

#EndIf

#If EC167MultiAppInterface

Declare Sub &HC0 200 RandomString (S$, ByVal Len%)

Sub EC167GenerateKeyPair (PrivateKey$, PublicKey$)
  Do
    LibError = 0
    Call RandomString (PrivateKey$, 20)
    PublicKey$ = EC167MakePublicKey (PrivateKey$)
  Loop While LibError = EC167BadProcParams
End Sub

Function EC167SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call ShaStart (HashBuff$)
  Call ShaAppend (HashBuff$, SharedSecret$)
  Call ShaAppend (HashBuff$, SessionID$)
  EC167SessionKey = ShaEnd (HashBuff$)
End Function

#ElseIfDef ProfessionalBasicCard

Declare Sub &HC0 200 RandomString (S$, ByVal Len%)

Sub EC167GenerateKeyPair()
  Private S$
  Do
    LibError = 0
    Call RandomString (S$, 20)
    Call EC167SetPrivateKey (S$)
  Loop While LibError = EC167BadProcParams
End Sub

Function EC167SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call ShaStart (HashBuff$)
  Call ShaAppend (HashBuff$, SharedSecret$)
  Call ShaAppend (HashBuff$, SessionID$)
  EC167SessionKey = ShaEnd (HashBuff$)
End Function

#Else ' TerminalProgram

Sub EC167GenerateKeyPair (ReadOnly Seed$)
  Do
    LibError = 0
    Call ShaRandomSeed (Seed$)
    Call EC167SetPrivateKey (ShaRandomHash())
  Loop While LibError = EC167BadProcParams
End Sub

Function EC167SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Call ShaStart()
  Call ShaAppend (SharedSecret$)
  Call ShaAppend (SessionID$)
  EC167SessionKey = ShaEnd()
End Function

#EndIf

#EndIf ' EC167DefIncluded
