Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2001 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  EC-161.DEF
Rem
Rem  Definition file for the 161-bit Elliptic Curve library EC-161
Rem
Rem  INITIALISATION PROCEDURES
Rem  =========================
Rem
Rem  Sub EC161SetCurve (Params As EC161DomainParams) ' Terminal program only
Rem
Rem      Specify the domain parameters for the Elliptic Curve. (These will
Rem      usually come from a file generated by ZeitControl software.)
Rem
Rem  Sub EC161GenerateKeyPair (Seed$)
Rem
Rem      Generate a private-key/public-key pair, saving the results in the
Rem      Public variables EC161PrivateKey and EC161PublicKey.
Rem
Rem  Sub EC161SetPrivateKey (Key$)
Rem
Rem      Set a specific private key, and generate the corresponding public
Rem      key, saving the results in the Public variables EC161PrivateKey and
Rem      EC161PublicKey.
Rem
Rem  CRYPTOGRAPHIC SCHEMES
Rem  =====================
Rem
Rem  Function EC161SessionKey (KDP$, SharedSecret$) As String
Rem
Rem      Generate a 20-byte session key from the Key Derivation Parameters KDP$
Rem      and the given SharedSecret$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the scheme ECKAS-DH1:
Rem      Elliptic Curve Key Agreement Scheme, Diffie-Hellman version, where
Rem      each party contributes one key pair.
Rem
Rem  Function EC161HashAndSignNR (Message$) As String
Rem
Rem      Compute the SHA-1 hash of the given message, and sign it with
Rem      EC161SignNR.
Rem
Rem      In the proposed IEEE P1363 standard, this is the Signature
Rem      Generation Operation of scheme ECSSA: Elliptic Curve Signature
Rem      Scheme with Appendix.
Rem
Rem  Function EC161HashAndVerifyNR (Signature$, Message$, PublicKey$)
Rem
Rem      Compute the SHA-1 hash of the given message, and verify the signature
Rem      with EC161VerifyNR.
Rem
Rem      In the proposed IEEE P1363 standard, this is the Signature
Rem      Verification Operation of scheme ECSSA: Elliptic Curve Signature
Rem      Scheme with Appendix.
Rem
Rem  CRYPTOGRAPHIC PRIMITIVES
Rem  ========================
Rem
Rem  Function EC161SharedSecret (PublicKey$) As String
Rem
Rem      Generate the shared secret corresponding to the given PublicKey$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive
Rem      ECSVDP-DHC: Elliptic Curve Secret Value Derivation Primitive,
Rem      Diffie-Hellman version with cofactor multiplication.
Rem
Rem  Function EC161SignNR (Hash$) As String
Rem
Rem      Compute the signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-NR:
Rem      Elliptic Curve Signature Primitive, Nyberg-Rueppel version.
Rem
Rem  Function EC161VerifyNR (Signature$, Hash$, PublicKey$)
Rem
Rem      Verify a signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-NR:
Rem      Elliptic Curve Verification Primitive, Nyberg-Rueppel version.

Rem  For backwards compatibility, the following alternative names are provided:
Rem
Rem    EC161HashAndSign for EC161HashAndSignNR
Rem    EC161HashAndVerify for EC161HashAndVerifyNR
Rem    EC161Sign for EC161SignNR
Rem    EC161Verify for EC161VerifyNR
Rem
Rem  This costs us no extra space, because uncalled procedures are discarded by the compiler.

#IfNotDef EC161DefIncluded ' Prevent multiple inclusion
Const EC161DefIncluded = True

#IfDef CardMajorVersion
  #If CardMajorVersion <> 3
    #Error The EC161 library is not available for this card
  #EndIf
#EndIf

#Include SHA.DEF

Type EC161DomainParams
  a as Byte
  b As String*21
  r As String*21
  k As Byte
  G As String*22
End Type

Rem  LibError codes

Const EC161BadCurveParams      = &H4501
Const EC161CurveNotInitialised = &H4502
Const EC161KeyNotInitialised   = &H4503
Const EC161BadProcParams       = &H4504
Const EC161CurveMismatch       = &H4505

#LibData
Eeprom EC161PrivateKey As String*21
Eeprom EC161PublicKey As String*22
#End LibData

#IfDef TerminalProgram

Declare Sub      &HC3 1 EC161InternSetCurve (ByVal Params As EC161DomainParams)
Declare Function &HC3 2 EC161InternReduceModR (ReadOnly n$) As String
Declare Function &HC3 3 EC161InternMultiply (ReadOnly n$) As String
Declare Function &HC3 4 EC161InternSharedSecret (ReadOnly PublicKey$, ReadOnly PrivateKey$) As String
Declare Function &HC3 5 EC161InternSign (ReadOnly Hash$, ReadOnly PrivateKey$, ReadOnly Random$) As String
Declare Function &HC3 6 EC161VerifyNR (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)
Declare Function &HC3 6 EC161Verify (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$) ' Alternative name
Declare Function &HC3 7 EC161MultiplyG (ReadOnly n$) As String

Sub EC161SetCurve (ByVal Params As EC161DomainParams)
  Call EC161InternSetCurve (Params)
  EC161PrivateKey = "" ' Private key is invalid now
End Sub

Sub EC161SetPrivateKey (ReadOnly Key$)
  EC161PrivateKey = EC161InternReduceModR (Key$)
  If LibError = EC161BadProcParams Then Exit Sub
  EC161PublicKey = EC161InternMultiply (EC161PrivateKey)
End Sub

Function EC161SharedSecret (ReadOnly PublicKey$) As String
  EC161SharedSecret = EC161InternSharedSecret (PublicKey$, EC161PrivateKey)
End Function

Function EC161SignNR (ReadOnly Hash$) As String
  EC161SignNR = EC161InternSign (Hash$, EC161PrivateKey, ShaRandomHash())
End Function

Function EC161HashAndSignNR (ReadOnly Data$) As String
  EC161HashAndSignNR = EC161SignNR (ShaHash (Data$))
End Function

Function EC161HashAndVerifyNR (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = ShaHash (Data$)
  EC161HashAndVerifyNR = EC161VerifyNR (Signature$, Hash$, PublicKey$)
End Function

Rem  Alternative names EC161Sign, EC161HashAndSign, and EC161HashAndVerify
Function EC161Sign (ReadOnly Hash$) As String
  EC161Sign = EC161InternSign (Hash$, EC161PrivateKey, ShaRandomHash())
End Function

Function EC161HashAndSign (ReadOnly Data$) As String
  EC161HashAndSign = EC161Sign (ShaHash (Data$))
End Function

Function EC161HashAndVerify (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = ShaHash (Data$)
  EC161HashAndVerify = EC161Verify (Signature$, Hash$, PublicKey$)
End Function

#Else ' #IfNotDef TerminalProgram

#Library EC-161.LIB

#IfNotDef LibErrorDeclared
Const LibErrorDeclared = True
Public LibError As Integer
#EndIf

#If CardMajorVersion = 3
  #If CardMinorVersion = 5
    Const ECFSAPCD = &H97B2
  #ElseIf CardMinorVersion = 6
    Const ECFSAPCD = &HB7B2
  #EndIf
#EndIf

Declare Sub EC161SetPrivateKey (ReadOnly Key$)

Declare Function EC161SharedSecret (ReadOnly PublicKey$) As String

Declare Sub EC161InternSign (ReadOnly Signature$, ReadOnly Hash$)

Sub EC161SignNR (ReadOnly Signature$, ReadOnly Hash$)
  Call ShaUpdateCounter()
  Call EC161InternSign (Signature$, Hash$)
End Sub

Sub EC161HashAndSignNR (ReadOnly Signature$, ReadOnly Data$)
  Call EC161SignNR (Signature$, ShaHash (Data$))
End Sub

Rem  Alternative names EC161Sign and EC161HashAndSign
Sub EC161Sign (ReadOnly Signature$, ReadOnly Hash$)
  Call ShaUpdateCounter()
  Call EC161InternSign (Signature$, Hash$)
End Sub

Sub EC161HashAndSign (ReadOnly Signature$, ReadOnly Data$)
  Call EC161Sign (Signature$, ShaHash (Data$))
End Sub


#EndIf ' #IfNotDef TerminalProgram

Sub EC161GenerateKeyPair (ReadOnly Seed$)
  Do
    LibError = 0 
    Call ShaRandomSeed (Seed$)
    Call EC161SetPrivateKey (ShaRandomHash())
  Loop While LibError = EC161BadProcParams
End Sub

Function EC161SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Call ShaStart()
  Call ShaAppend (SharedSecret$)
  Call ShaAppend (SessionID$)
  EC161SessionKey = ShaEnd()
End Function

#EndIf ' EC161DefIncluded
