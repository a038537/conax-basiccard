Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2005 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  EC-211.DEF
Rem
Rem  Definition file for the 211-bit Elliptic Curve library EC-211
Rem
Rem  INITIALISATION PROCEDURES
Rem  =========================
Rem
Rem  Sub EC211SetCurve (Params As EC211DomainParams) ' Terminal program only
Rem
Rem      Specify the domain parameters for the Elliptic Curve. (These will
Rem      usually come from a file generated by ZeitControl software.)
Rem
Rem  Sub EC211SetCurve (ParamFile$) ' MultiApplication BasicCard only
Rem
Rem      Specify a file containing domain parameters for the Elliptic Curve.
Rem
Rem  Sub EC211GenerateKeyPair (Seed$) ' Terminal and Professional BasicCard
Rem  Sub EC211GenerateKeyPair (PrivateKey$, PublicKey$) ' MultiApplication
Rem
Rem      Generate a private-key/public-key pair, saving the results in the
Rem      Eeprom variables EC211PrivateKey and EC211PublicKey (or in the
Rem      procedure parameters PrivateKey$, PublicKey$ in a MultiApplication
Rem      BasicCard).
Rem
Rem  Sub EC211SetPrivateKey (PrivateKey$) ' Terminal and Professional BasicCard
Rem
Rem      Compute a public key from a specific private key, saving the results
Rem      in the Eeprom variables EC211PrivateKey and EC211PublicKey
Rem
Rem  Function EC211MakePublicKey (PrivateKey$) As String ' MultiApplication
Rem
Rem      Compute a public key from a specific private key
Rem
Rem  CRYPTOGRAPHIC SCHEMES
Rem  =====================
Rem
Rem  Function EC211SessionKey (KDP$, SharedSecret$) As String
Rem
Rem      Generate a 32-byte session key from the Key Derivation Parameters KDP$
Rem      and the given SharedSecret$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the scheme ECKAS-DH1:
Rem      Elliptic Curve Key Agreement Scheme, Diffie-Hellman version, where
Rem      each party contributes one key pair.
Rem
Rem  Function EC211HashAndSignNR (Data$) As String ' Terminal and Professional
Rem  Function EC211HashAndSignNR (PrivateKey$, Data$) As String ' MultiApplication
Rem  Function EC211HashAndSignDSA (Data$) As String ' Terminal and Professional
Rem  Function EC211HashAndSignDSA (PrivateKey$, Data$) As String ' MultiApplication
Rem
Rem      Compute the SHA-256 hash of the given data, and sign it with
Rem      EC211SignNR or EC211SignDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Generation Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  Function EC211HashAndVerifyNR (Signature$, Data$, PublicKey$)
Rem  Function EC211HashAndVerifyDSA (Signature$, Data$, PublicKey$)
Rem
Rem      Compute the SHA-256 hash of the given message, and verify the
Rem      signature with EC211VerifyNR or EC211VerifyDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Verification Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  CRYPTOGRAPHIC PRIMITIVES
Rem  ========================
Rem
Rem  Function EC211SharedSecret (PublicKey$) As String ' Terminal and Professional
Rem  Function EC211SharedSecret (PrivateKey$, PublicKey$) As String ' MultiApplication
Rem
Rem      Generate the shared secret corresponding to the given PublicKey$.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive
Rem      ECSVDP-DHC: Elliptic Curve Secret Value Derivation Primitive,
Rem      Diffie-Hellman version with cofactor multiplication.
Rem
Rem  Function EC211SignNR (Hash$) As String ' Terminal and Professional
Rem  Function EC211SignNR (PrivateKey$, Hash$) As String ' MultiApplication
Rem
Rem      Compute the Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-NR:
Rem      Elliptic Curve Signature Primitive, Nyberg-Rueppel version.
Rem
Rem  Function EC211SignDSA (Hash$) As String ' Terminal and Professional
Rem  Function EC211SignDSA (PrivateKey$, Hash$) As String ' MultiApplication
Rem
Rem      Compute the DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-DSA:
Rem      Elliptic Curve Signature Primitive, DSA version.
Rem
Rem  Function EC211VerifyNR (Signature$, Hash$, PublicKey$)
Rem
Rem      Verify a Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-NR:
Rem      Elliptic Curve Verification Primitive, Nyberg-Rueppel version.
Rem
Rem  Function EC211VerifyDSA (Signature$, Hash$, PublicKey$)
Rem
Rem      Verify a DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-DSA:
Rem      Elliptic Curve Verification Primitive, DSA version.

Rem  For backwards compatibility, the following alternative names are provided:
Rem
Rem    EC211HashAndSign for EC211HashAndSignNR
Rem    EC211HashAndVerify for EC211HashAndVerifyNR
Rem    EC211Sign for EC211SignNR
Rem    EC211Verify for EC211VerifyNR
Rem
Rem  This costs us no extra space, because uncalled procedures are discarded by the compiler.

#IfNotDef EC211DefIncluded ' Prevent multiple inclusion
Const EC211DefIncluded = True

#IfDef CardMajorVersion
  #If CardMajorVersion < 5
    #Error The EC211 library is not available for this card
  #EndIf
#EndIf

#Include SHA.DEF

Type EC211DomainParams
  a As Byte
  b As String*27
  r As String*27
  G As String*27
End Type

Rem  LibError codes

Const EC211BadCurveParams      = &H4C01
Const EC211CurveNotInitialised = &H4C02
Const EC211KeyNotInitialised   = &H4C03
Const EC211BadProcParams       = &H4C04
Const EC211CurveMismatch       = &H4C05
Const EC211DataNotFound        = &H4C06
Const EC211FileNotContigous    = &H4C07 ' Misspelling retained for backwards compatibility
Const EC211FileNotContiguous   = &H4C07
Const EC211FileNotFound        = &H4C08
Const EC211FileOpen            = &H4C09

#IfDef TerminalProgram
  Const EC211MultiAppInterface = False
#ElseIf CardMajorVersion >= 6
  Const EC211MultiAppInterface = True
#Else
  Const EC211MultiAppInterface = False
#EndIf

#If EC211MultiAppInterface

  Declare Sub      &HCC 1 EC211SetCurve (ReadOnly filename$)
  Declare Function &HCC 3 EC211SharedSecret (ReadOnly PrivateKey$, ReadOnly PublicKey$) As String
  Declare Function &HCC 4 EC211SignNR (ReadOnly PrivateKey$, ReadOnly Hash$) As String
  Declare Function &HCC 4 EC211Sign (ReadOnly PrivateKey$, ReadOnly Hash$) As String ' Alternative name
  Declare Function &HCC 5 EC211VerifyNR (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)
  Declare Function &HCC 5 EC211Verify (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$) ' Alternative name
  Declare Function &HCC 6 EC211MakePublicKey (ReadOnly PrivateKey$) As String
  Declare Function &HCC 7 EC211SignDSA (ReadOnly PrivateKey$, ReadOnly Hash$) As String
  Declare Function &HCC 8 EC211VerifyDSA (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)

  Function EC211HashAndSignNR (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC211HashAndSignNR = EC211SignNR (PrivateKey$, Sha256Hash (Data$))
  End Function

  Rem  Alternative name EC211HashAndSign
  Function EC211HashAndSign (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC211HashAndSign = EC211SignNR (PrivateKey$, Sha256Hash (Data$))
  End Function

  Function EC211HashAndSignDSA (ReadOnly PrivateKey$, ReadOnly Data$) As String
    EC211HashAndSignDSA = EC211SignDSA (PrivateKey$, Sha256Hash (Data$))
  End Function

  #If CardMajorVersion >= 7
    Declare Sub      &HCC 9  EC211SetCurveIndex (CurveIndex%)
    Declare Function &HCC 10 EC211GetCurve() As EC211DomainParams
  #EndIf

#Else

  Eeprom EC211PrivateKey As String*27
  Eeprom EC211PublicKey As String*27

  Declare Sub      &HCC 1 EC211SetCurve (ByVal Params As EC211DomainParams)
  Declare Sub      &HCC 2 EC211SetPrivateKey (ReadOnly Key$)
  Declare Function &HCC 3 EC211SharedSecret (ReadOnly PublicKey$) As String
  Declare Function &HCC 4 EC211SignNR (ReadOnly Hash$) As String
  Declare Function &HCC 4 EC211Sign (ReadOnly Hash$) As String ' Alternative name
  Declare Function &HCC 5 EC211VerifyNR (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)
  Declare Function &HCC 5 EC211Verify (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$) ' Alternative name
  Declare Function &HCC 7 EC211SignDSA (ReadOnly Hash$) As String
  Declare Function &HCC 8 EC211VerifyDSA (ReadOnly Signature$, ReadOnly Hash$, ReadOnly PublicKey$)

  Function EC211HashAndSignNR (ReadOnly Data$) As String
    EC211HashAndSignNR = EC211SignNR (Sha256Hash (Data$))
  End Function

  Rem  Alternative name EC211HashAndSign
  Function EC211HashAndSign (ReadOnly Data$) As String
    EC211HashAndSign = EC211SignNR (Sha256Hash (Data$))
  End Function

  Function EC211HashAndSignDSA (ReadOnly Data$) As String
    EC211HashAndSignDSA = EC211SignDSA (Sha256Hash (Data$))
  End Function

#EndIf

Function EC211HashAndVerifyNR (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = Sha256Hash (Data$)
  EC211HashAndVerifyNR = EC211VerifyNR (Signature$, Hash$, PublicKey$)
End Function

Rem  Alternative name EC211HashAndVerify
Function EC211HashAndVerify (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = Sha256Hash (Data$)
  EC211HashAndVerify = EC211VerifyNR (Signature$, Hash$, PublicKey$)
End Function

Function EC211HashAndVerifyDSA (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  Private Hash$: Hash$ = Sha256Hash (Data$)
  EC211HashAndVerifyDSA = EC211VerifyDSA (Signature$, Hash$, PublicKey$)
End Function

#If EC211MultiAppInterface

Declare Sub &HC0 200 RandomString (S$, ByVal Len%)

Sub EC211GenerateKeyPair (PrivateKey$, PublicKey$)
  Do
    LibError = 0
    Call RandomString (PrivateKey$, 26)
    PublicKey$ = EC211MakePublicKey (PrivateKey$)
  Loop While LibError = EC211BadProcParams
End Sub

Function EC211SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call Sha256Start (HashBuff$)
  Call Sha256Append (HashBuff$, SharedSecret$)
  Call Sha256Append (HashBuff$, SessionID$)
  EC211SessionKey = Sha256End (HashBuff$)
End Function

#ElseIfDef ProfessionalBasicCard

Declare Sub &HC0 200 RandomString (S$, ByVal Len%)

Sub EC211GenerateKeyPair()
  Private S$
  Do
    LibError = 0
    Call RandomString (S$, 26)
    Call EC211SetPrivateKey (S$)
  Loop While LibError = EC211BadProcParams
End Sub

Function EC211SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call Sha256Start (HashBuff$)
  Call Sha256Append (HashBuff$, SharedSecret$)
  Call Sha256Append (HashBuff$, SessionID$)
  EC211SessionKey = Sha256End (HashBuff$)
End Function

#Else ' TerminalProgram

Sub EC211GenerateKeyPair (ReadOnly Seed$)
  Do
    LibError = 0
    Call ShaRandomSeed (Seed$)
    Call EC211SetPrivateKey (ShaRandomHash())
  Loop While LibError = EC211BadProcParams
End Sub

Function EC211SessionKey (ReadOnly SessionID$, ReadOnly SharedSecret$) As String
  Call Sha256Start()
  Call Sha256Append (SharedSecret$)
  Call Sha256Append (SessionID$)
  EC211SessionKey = Sha256End()
End Function

#EndIf

#EndIf ' EC211DefIncluded
