Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2008 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  SHA.DEF
Rem
Rem  Definition file for library SHA: Secure Hash Algorithm, revision 1
Rem
Rem  This library implements the Secure Hash Algorithms SHA-1 and SHA-256
Rem  defined in Federal Information Processing Standard FIPS 180-2. This
Rem  standard is available on the Internet, at
Rem
Rem    www.csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
Rem
Rem  SHA-1
Rem  -----
Rem
Rem    Function ShaHash (S$) As String
Rem
Rem  Returns the 20-byte hash value of the string S$
Rem
Rem  The following procedures can hash larger amounts of data:
Rem
Rem    Sub ShaStart()
Rem    Sub ShaAppend (S$)
Rem    Function ShaEnd() As String
Rem
Rem  Call ShaStart() to initialise the hashing process, then ShaAppend (S$)
Rem  for successive blocks of data, and finally ShaEnd() to get the 20-byte
Rem  hash value.
Rem
Rem  Pseudo-random number generation using SHA-1:
Rem
Rem    Sub ShaRandomSeed (Seed$)
Rem    Function ShaRandomHash() As String
Rem
Rem  In the Professional and MultiApplication BasicCards, the following
Rem  procedures are defined:
Rem
Rem    Sub ShaStart (HashBuff$)
Rem    Sub ShaAppend (HashBuff$, S$)
Rem    Function ShaEnd (HashBuff$) As String
Rem
Rem  and procedures ShaRandomSeed and ShaRandomHash are not available
Rem  (a hardware random number generator is available via the MISC Library
Rem  procedure RandomString, or the Rnd keyword).
Rem
Rem  SHA-256
Rem  -------
Rem
Rem    Function Sha256Hash (S$) As String
Rem
Rem  Returns the 32-byte hash value of the string S$
Rem
Rem  The following procedures can hash larger amounts of data:
Rem
Rem    Sub Sha256Start()
Rem    Sub Sha256Append (S$)
Rem    Function Sha256End() As String
Rem
Rem  Call Sha256Start() to initialise the hashing process, then
Rem  Sha256Append (S$) for successive blocks of data, and finally
Rem  Sha256End() to get the 32-byte hash value.
Rem
Rem  In the Professional and MultiApplication BasicCards, the following
Rem  procedures are defined:
Rem
Rem    Sub Sha256Start (HashBuff$)
Rem    Sub Sha256Append (HashBuff$, S$)
Rem    Function Sha256End (HashBuff$) As String
Rem
Rem  SHA-224, SHA-384, SHA-512
Rem  -------------------------
Rem  In the Terminal program, and in Series 7 Professional BasicCards from REV B,
Rem  all the SHA-2 algorithms are supported. The procedures are the same as for
Rem  SHA-256 (in the following, XXX can be 224,384, or 512):
Rem
Rem  Terminal program:
Rem    Function ShaXXXHash (S$) As String
Rem    Sub ShaXXXStart()
Rem    Sub ShaXXXAppend (S$)
Rem    Function ShaXXXEnd() As String
Rem
Rem  Professional BasicCard ZC7.X REV B and higher:
Rem    Sub ShaXXXStart (HashBuff$)
Rem    Sub ShaXXXAppend (HashBuff$, S$)
Rem    Function ShaXXXEnd (HashBuff$) As String

#IfNotDef ShaDefIncluded ' Prevent multiple inclusion
Const ShaDefIncluded = True

#IfDef ProfessionalBasicCard
  Const NewerBasicCard = True
#ElseIfDef MultiAppBasicCard
  Const NewerBasicCard = True
#Else
  Const NewerBasicCard = False
#EndIf

#If NewerBasicCard

Declare Function &HC2 0 ShaHash (ReadOnly S$) As String
Declare Sub      &HC2 1 ShaStart (HashBuff$)
Declare Sub      &HC2 2 ShaAppend (HashBuff$, ReadOnly S$)
Declare Function &HC2 3 ShaEnd (HashBuff$) As String

Declare Function &HC2 10 Sha256Hash (ReadOnly S$) As String
Declare Sub      &HC2 11 Sha256Start (HashBuff$)
Declare Sub      &HC2 12 Sha256Append (HashBuff$, ReadOnly S$)
Declare Function &HC2 13 Sha256End (HashBuff$) As String

Rem  Sha224 procedures are numbered after Sha256 procedures. because they
Rem  were implemented later:
Declare Function &HC2 20 Sha224Hash (ReadOnly S$) As String
Declare Sub      &HC2 21 Sha224Start (HashBuff$)
Declare Sub      &HC2 22 Sha224Append (HashBuff$, ReadOnly S$)
Declare Function &HC2 23 Sha224End (HashBuff$) As String

Declare Function &HC2 30 Sha384Hash (ReadOnly S$) As String
Declare Sub      &HC2 31 Sha384Start (HashBuff$)
Declare Sub      &HC2 32 Sha384Append (HashBuff$, ReadOnly S$)
Declare Function &HC2 33 Sha384End (HashBuff$) As String

Declare Function &HC2 40 Sha512Hash (ReadOnly S$) As String
Declare Sub      &HC2 41 Sha512Start (HashBuff$)
Declare Sub      &HC2 42 Sha512Append (HashBuff$, ReadOnly S$)
Declare Function &HC2 43 Sha512End (HashBuff$) As String

#Else ' #If Not NewerBasicCard

Rem  Random number generation

#IfDef TerminalProgram

Eeprom ShaPoolAndCounter As String*36
Eeprom ShaRandomPool As String*32 At ShaPoolAndCounter
Eeprom ShaRandomCounter As Long At ShaPoolAndCounter+32

Declare Function &HC2 0 ShaHash (ReadOnly S$) As String
Declare Sub      &HC2 1 ShaStart()
Declare Sub      &HC2 2 ShaAppend (ReadOnly S$)
Declare Function &HC2 3 ShaEnd() As String

Declare Function &HC2 10 Sha256Hash (ReadOnly S$) As String
Declare Sub      &HC2 11 Sha256Start()
Declare Sub      &HC2 12 Sha256Append (ReadOnly S$)
Declare Function &HC2 13 Sha256End() As String

Declare Function &HC2 20 Sha224Hash (ReadOnly S$) As String
Declare Sub      &HC2 21 Sha224Start()
Declare Sub      &HC2 22 Sha224Append (ReadOnly S$)
Declare Function &HC2 23 Sha224End() As String

Declare Function &HC2 30 Sha384Hash (ReadOnly S$) As String
Declare Sub      &HC2 31 Sha384Start()
Declare Sub      &HC2 32 Sha384Append (ReadOnly S$)
Declare Function &HC2 33 Sha384End() As String

Declare Function &HC2 40 Sha512Hash (ReadOnly S$) As String
Declare Sub      &HC2 41 Sha512Start()
Declare Sub      &HC2 42 Sha512Append (ReadOnly S$)
Declare Function &HC2 43 Sha512End() As String

Declare Function &HC2 4 ShaTimer() As String ' For internal use only
Sub ShaRandomSeed (ReadOnly Seed$)
  ShaRandomPool = Sha256Hash (ShaRandomPool + ShaTimer() + Seed$)
  ShaRandomCounter = 0
End Sub

Sub ShaUpdateCounter() ' For internal use only
  If ShaRandomCounter = &H7FFFFFFF Then Call ShaRandomSeed ("")
  ShaRandomCounter = ShaRandomCounter + 1
End Sub

Function ShaRandomHash() As String
  Call ShaUpdateCounter()
  ShaRandomHash = Sha256Hash (ShaPoolAndCounter)
End Function

#Else ' Enhanced BasicCard program

#LibData
Eeprom ShaPoolAndCounter As String*24
Eeprom ShaRandomPool As String*20 At ShaPoolAndCounter
Eeprom ShaRandomCounter As Long At ShaPoolAndCounter+20
#End LibData

#Library SHA-1.LIB

#Include Misc.def

Declare Function ShaHash (S$) As String
Declare Sub ShaStart()
Declare Sub ShaAppend (ReadOnly S$)
Declare Function ShaEnd() As String

Sub ShaRandomSeed (ReadOnly Seed$)
  ShaRandomPool = ShaHash (ShaRandomPool + CardSerialNumber() + Seed$)
  ShaRandomCounter = 0
End Sub

Sub ShaUpdateCounter() ' For internal use only
  If ShaRandomCounter = &H7FFFFFFF Then Call ShaRandomSeed ("")
  ShaRandomCounter = ShaRandomCounter + 1
End Sub

Function ShaRandomHash() As String
  Call ShaUpdateCounter()
  ShaRandomHash = ShaHash (ShaPoolAndCounter)
End Function

#LibData
  Eeprom ShaState As String*88 ' Current state: nbytes, H0-H4, W
#End LibData

#EndIf ' #IfNotDef TerminalProgram
#EndIf ' #If Not NewerBasicCard
#EndIf ' ShaDefIncluded