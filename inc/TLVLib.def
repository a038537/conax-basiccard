Rem BasicCard TLV Library
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2005 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  User-defined type:
Rem
Rem    Type TlvPointer
Rem      Start as Integer
Rem      Length as Integer
Rem    End Type
Rem
Rem  Procedures:
Rem
Rem  Sub TLVInitObject (Parent As TlvPointer, ReadOnly Data$)
Rem    Initialise Parent to the whole of Data$, for use in subsequent procedures
Rem
Rem  Sub TLVInitChild (ReadOnly Parent As TlvPointer, Child As TlvPointer)
Rem    Initialise Child for use in TLVNextChild or TLVNextMatchingChild
Rem
Rem  Function TLVFirstChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ReadOnly Data$)
Rem    The same as calling TLVInitChild followed by TLVNextChild
Rem
Rem  Function TLVNextChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ReadOnly Data$)
Rem    Get the next child of Parent
Rem    Returns the Tag of the next child, or 0 if Parent has no more children
Rem
Rem  Function TLVFirstMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)
Rem    The same as calling TLVInitChild followed by TLVNextMatchingChild
Rem
Rem  Function TLVNextMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)
Rem    Get the next child of Parent with the given Tag
Rem    Returns True (-1) if successful, or False (0) if Parent has no more matching children
Rem
Rem  Function TLVLastMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)
Rem    Get the last child of Parent with the given Tag
Rem    Returns True (-1) if successful, or False (0) if Parent has no matching children
Rem
Rem  Sub TLVEnumInit (Ptr As TlvPointer, ReadOnly Data$)
Rem    Initialise Ptr for use in TLVEnumNext
Rem
Rem  Function  TLVEnumFirst (Ptr As TlvPointer, ReadOnly Data$)
Rem    The same as calling TLVEnumInit followed by TLVEnumNext
Rem
Rem  Function  TLVEnumNext (Ptr As TlvPointer, ReadOnly Data$)
Rem    Get the next object in the flattened TLV tree structure
Rem    Returns the Tag of the next object, or 0 if Data$ has no more objects
Rem
Rem  Function  TLVCreateObject (ByVal Tag as Integer, ReadOnly Value$) As String
Rem    Build a TLV structure from the Tag and Value$ fields
Rem
Rem  Sub TLVAddChild (ReadOnly Parent As TlvPointer, ByVal InsertPos, ByVal Tag as Integer, ReadOnly Value$, Data$)
Rem    Add a child with the given Tag and Value$ fields to the Parent
Rem    InsertPos is relative to the start of Data$, not the start of Parent.
Rem
Rem    The Parent parameter is required to resolve ambiguity when InsertPos
Rem    coincides with the end of a constructed object. For instance (all numbers in hex):
Rem
Rem      InsertPos = 08
Rem      Tag = 02
Rem      Value$ = AB CD
Rem      Data$ = 30 08 [30 03 [02 01 [45]] 02 01 [97]]
Rem
Rem    Without the Parent parameter, we can't know whether to add the child to the inner parent:
Rem
Rem      Data$ = 30 0C [30 07 [02 01 [45] 02 02 [AB CD]] 02 01 [97]]
Rem
Rem    or to the outer parent:
Rem
Rem      Data$ = 30 0C [30 03 [02 01 [45]] 02 02 [AB CD] 02 01 [97]]
Rem
Rem  Sub TLVDeleteChild (ReadOnly Child As TlvPointer, Data$)
Rem    Delete the child from Data$
Rem
Rem  Sub TLVReplaceChild (Child As TlvPointer, ByVal Tag as Integer, ReadOnly Value$, Data$)
Rem    Replace Child with the TLV object specified by Tag and Value$
Rem
Rem  Sub TLVFullObject (Object As TlvPointer, ReadOnly Data$)
Rem    On entry, Object specifies the position and size of a Value field.
Rem    On exit, Object specifies the position and size of the full TLV object.

#IfNotDef TLVDefIncluded ' Prevent multiple inclusion
Const TLVDefIncluded = True

Type TlvPointer
  Start as Integer
  Length as Integer
End Type

Declare Sub      &HCE 1 TLVInitObject (Parent As TlvPointer, ReadOnly Data$)
Declare Sub      &HCE 2 TLVInitChild (ReadOnly Parent As TlvPointer, Child As TlvPointer)
Declare Function &HCE 3 TLVFirstChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ReadOnly Data$)
Declare Function &HCE 4 TLVNextChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ReadOnly Data$)
Declare Function &HCE 5 TLVFirstMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)
Declare Function &HCE 6 TLVNextMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)
Declare Function &HCE 7 TLVLastMatchingChild (ReadOnly Parent As TlvPointer, Child As TlvPointer, ByVal Tag, ReadOnly Data$)

Declare Sub      &HCE 11 TLVEnumInit (Ptr As TlvPointer, ReadOnly Data$)
Declare Function &HCE 12 TLVEnumFirst (Ptr As TlvPointer, ReadOnly Data$)
Declare Function &HCE 13 TLVEnumNext (Ptr As TlvPointer, ReadOnly Data$)
Declare Function &HCE 14 TLVEnumFirstMatching (ByRef Ptr As TlvPointer, ReadOnly Data$, ByVal Tag)
Declare Function &HCE 15 TLVEnumNextMatching (ByRef Ptr As TlvPointer, ReadOnly Data$, ByVal Tag)
Declare Function &HCE 16 TLVEnumFirstFX (ByRef Ptr As TlvPointer, ReadOnly Data$)
               
Declare Function &HCE 21 TLVCreateObject (ByVal Tag as Integer, ReadOnly Value$) As String

Declare Sub      &HCE 31 TLVAddChild (ReadOnly Parent As TlvPointer, ByVal InsertPos, ByVal Tag as Integer, ReadOnly Value$, Data$)
Declare Sub      &HCE 32 TLVDeleteChild (ReadOnly Child As TlvPointer, Data$)
Declare Sub      &HCE 33 TLVReplaceChild (Child As TlvPointer, ByVal Tag as Integer, ReadOnly Value$, Data$)

Declare Sub      &HCE 40 TLVFullObject (Object As TlvPointer, ReadOnly Data$)

Rem  Error codes                    
Const TLVInvalidObject  = &H4E01
Const TLVNotConstructed = &H4E02
Const TLVObjectTooBig   = &H4E03
Const TLVInvalidTag     = &H4E04

#EndIf ' TLVDefIncluded
