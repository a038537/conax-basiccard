Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2005 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  EC-p.DEF
Rem
Rem  Definition file for the Elliptic Curve library EC-p
Rem
Rem  INITIALISATION PROCEDURES
Rem  =========================
Rem
Rem  Sub ECpSetCurve (CurveIndex%)
Rem
Rem      Select one of nineteen pre-defined curves
Rem
Rem  Sub ECpSetCurveFromFile (Filename$)
Rem
Rem      Specify a file containing domain parameters for the Elliptic Curve
Rem
Rem  Function ECpBitLength()
Rem
Rem      Retrieve the bit length of the modulus p of the currently selected curve
Rem
Rem  KEY GENERATION
Rem  ==============
Rem
Rem  Sub ECpGenerateKeyPair (PrivateKey$, PublicKey$)
Rem
Rem      Generate a private key/public key pair for the currently selected curve
Rem
Rem  Sub ECpMakePublicKey (PrivateKey$, PublicKey$)
Rem
Rem      Compute the public key corresponding to a given private key
Rem
Rem  CRYPTOGRAPHIC SCHEMES
Rem  =====================
Rem
Rem  Function ECpSessionKey (KDP$, SharedSecret$) As String
Rem
Rem      Generate a 32-byte session key from the Key Derivation Parameters KDP$
Rem      and the given SharedSecret$
Rem
Rem      In the proposed IEEE P1363 standard, this is the scheme ECKAS-DH1:
Rem      Elliptic Curve Key Agreement Scheme, Diffie-Hellman version, where
Rem      each party contributes one key pair.
Rem
Rem  Function ECpHashAndSignNR (PrivateKey$, Data$) As String
Rem  Function ECpHashAndSignDSA (PrivateKey$, Data$) As String
Rem
Rem      Compute the SHA-256 hash of the given data, and sign it with
Rem      ECpSignNR or ECpSignDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Generation Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  Function ECpHashAndVerifyNR (Signature$, Data$, PublicKey$)
Rem  Function ECpHashAndVerifyDSA (Signature$, Data$, PublicKey$)
Rem
Rem      Compute the SHA-256 hash of the given message, and verify the
Rem      signature with ECpVerifyNR or ECpVerifyDSA.
Rem
Rem      In the proposed IEEE P1363 standard, these procedures implement
Rem      the Signature Verification Operation of scheme ECSSA: Elliptic Curve
Rem      Signature Scheme with Appendix.
Rem
Rem  CRYPTOGRAPHIC PRIMITIVES
Rem  ========================
Rem
Rem  Sub ECpSharedSecret (PrivateKey$, PublicKey$, SharedSecret$)
Rem
Rem      Generate the shared secret corresponding to the given PrivateKey$/PublicKey$ pair.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive
Rem      ECSVDP-DHC: Elliptic Curve Secret Value Derivation Primitive,
Rem      Diffie-Hellman version with cofactor multiplication.
Rem
Rem  Sub ECpSignNR (Hash$, PrivateKey$, Signature$)
Rem
Rem      Compute the Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-NR:
Rem      Elliptic Curve Signature Primitive, Nyberg-Rueppel version.
Rem
Rem  Sub ECpSignDSA (Hash$, PrivateKey$, Signature$)
Rem
Rem      Compute the DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECSP-DSA:
Rem      Elliptic Curve Signature Primitive, DSA version.
Rem
Rem  Function ECpVerifyNR (Hash$, PublicKey$, Signature$)
Rem
Rem      Verify a Nyberg-Rueppel signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-NR:
Rem      Elliptic Curve Verification Primitive, Nyberg-Rueppel version.
Rem
Rem  Function ECpVerifyDSA (Hash$, PublicKey$, Signature$)
Rem
Rem      Verify a DSA signature for the given Hash$ value.
Rem
Rem      In the proposed IEEE P1363 standard, this is the primitive ECVP-DSA:
Rem      Elliptic Curve Verification Primitive, DSA version.
Rem
Rem  CURVE PRIMITIVES
Rem  ================
Rem
Rem  Sub ECpAddPoints (P$, Q$)
Rem
Rem      Compute the sum of two points on the curve: P = P + Q
Rem
Rem  Sub ECpMultiplyPoint (P$, n$)
Rem
Rem      Multiply a point on the curve by an integer: P = [n]P

#IfNotDef ECpDefIncluded ' Prevent multiple inclusion
Const ECpDefIncluded = True

#Include SHA.DEF

Declare Sub      &HCD 1 ECpSetCurve (ByVal CurveIndex%)
Declare Sub      &HCD 2 ECpSetCurveFromFile (ReadOnly Filename$)
Declare Function &HCD 3 ECpBitLength()
Declare Sub      &HCD 4 ECpGenerateKeyPair (PrK$, PuK$)
Declare Sub      &HCD 5 ECpMakePublicKey (ReadOnly PrK$, PuK$)
Declare Sub      &HCD 6 ECpPackPublicKey (PuK$)
Declare Sub      &HCD 7 ECpUnpackPublicKey (PuK$)
Declare Sub      &HCD 8 ECpSharedSecret (ReadOnly PrK$, ReadOnly PuK$, Secret$)
Declare Sub      &HCD 9 ECpSignNR (ReadOnly Hash$, ReadOnly PrK$, Sig$)
Declare Function &HCD 10 ECpVerifyNR (ReadOnly Hash$, ReadOnly PuK$, ReadOnly Sig$)
Declare Sub      &HCD 11 ECpSignDSA (ReadOnly Hash$, ReadOnly PrK$, Sig$)
Declare Function &HCD 12 ECpVerifyDSA (ReadOnly Hash$, ReadOnly PuK$, ReadOnly Sig$)
Declare Sub      &HCD 13 ECpAddPoints (P$, Q$)
Declare Sub      &HCD 14 ECpMultiplyPoint (P$, n$)

#IfDef TerminalProgram

Function ECpSessionKey (ReadOnly KDP$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call Sha256Start()
  Call Sha256Append(SharedSecret$)
  Call Sha256Append(KDP$)
  ECpSessionKey = Sha256End()
End Function

#Else

Function ECpSessionKey (ReadOnly KDP$, ReadOnly SharedSecret$) As String
  Private HashBuff$
  Call Sha256Start (HashBuff$)
  Call Sha256Append (HashBuff$, SharedSecret$)
  Call Sha256Append (HashBuff$, KDP$)
  ECpSessionKey = Sha256End (HashBuff$)
End Function

#EndIf

Function ECpHashAndSignNR (ReadOnly PrivateKey$, ReadOnly Data$) As String
  Call ECpSignNR (Sha256Hash (Data$), PrivateKey$, ECpHashAndSignNR)
End Function

Function ECpHashAndSignDSA (ReadOnly PrivateKey$, ReadOnly Data$) As String
  Call ECpSignDSA (Sha256Hash (Data$), PrivateKey$, ECpHashAndSignDSA)
End Function

Function ECpHashAndVerifyNR (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  ECpHashAndVerifyNR = ECpVerifyNR (Sha256Hash (Data$), PublicKey$, Signature$)
End Function

Function ECpHashAndVerifyDSA (ReadOnly Signature$, ReadOnly Data$, ReadOnly PublicKey$)
  ECpHashAndVerifyDSA = ECpVerifyDSA (Sha256Hash (Data$), PublicKey$, Signature$)
End Function

Rem  Error codes                    
Const ECpCurveNotInitialised = &H4D01
Const ECpBadProcParams       = &H4D02
Const ECpBadKey              = &H4D03
Const ECpFileNotFound        = &H4D04
Const ECpFileNotContiguous   = &H4D05
Const ECpBadCurveParams      = &H4D06
Const ECpObsoleteSoftware    = &H4D07

#EndIf ' ECpDefIncluded
