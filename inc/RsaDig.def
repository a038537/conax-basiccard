Rem BasicCard Plug-In Library Definition File
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-1999 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------

Rem  RsaDig.def
Rem
Rem  RsaPKCS1Sign and RsaPKCS1Verify with custom message digest:
Rem
Rem    Function RsaPKCS1SignDigest (Digest$, p$, q$, e$, Sig$)
Rem    Function RsaPKCS1VerifyDigest (Digest$, n$, e$, Sig$)

#IfNotDef RsaDigDefIncluded ' Prevent multiple inclusion
Const RsaDigDefIncluded = True

#Include Rsa.def

Rem  Function RsaPKCS1SignDigest (Digest$, p$, q$, e$, Sig$)
Rem
Rem  This function mimics RsaPKCS1Sign, but uses the given Digest
Rem
Rem  NOTE: For performance reasons, we assume that Len(p$ * q$) is equal to
Rem  Len(p$) + Len(q$). This will always be the case for keys generated by
Rem  ZeitControl cards and software, but is not true of RSA keys in general.
Rem  If this is a potential problem for you, use
Rem
Rem    nLen = Len(RsaPublicKey (p$, q$))
Rem
Rem  to calculate the true length.

Function RsaPKCS1SignDigest (ReadOnly Digest$, ReadOnly p$, ReadOnly q$, ReadOnly e$, Sig$) As Integer

  Private nLen : nLen = Len(p$) + Len(q$)

  Rem  According to the PKCS1 spec, at least eight &HFF filler bytes are
  Rem  required:

  Private FillerLen : FillerLen = nLen - Len(Digest$) - 3
  If FillerLen >= 8 Then
    Sig$ = Chr$(1) + String$(FillerLen, &HFF) + Chr$(0) + Digest$
    Call RsaDecrypt (Sig$, p$, q$, e$)
    RsaPKCS1SignDigest = True
  Else ' Modulus is too small
    RsaPKCS1SignDigest = False
  End If
End Function ' RsaPKCS1SignDigest

Rem  Function RsaPKCS1VerifyDigest (Digest$, n$, e$, Sig$)
Rem
Rem  This function mimics RsaPKCS1Verify, but uses the given Digest

Function RsaPKCS1VerifyDigest (ReadOnly Digest$, ReadOnly n$, ReadOnly e$, ReadOnly Sig$) As Integer

  RsaPKCS1VerifyDigest = False

  Private nLen : nLen = Len(n$)

  Rem  According to the PKCS1 spec, at least eight &HFF filler bytes are
  Rem  required:

  Private FillerLen : FillerLen = nLen - Len(Digest$) - 3
  If FillerLen >= 8 Then
    Private S$ : S$ = Sig$
    Call RsaEncrypt (S$, n$, e$)
    If S$ = Chr$(1) + String$(FillerLen, &HFF) + Chr$(0) + Digest$ Then
      RsaPKCS1VerifyDigest = True
    End If
  End If
End Function ' RsaPKCS1VerifyDigest

Rem  Our original implementation of RsaPKCS1Sign and RsaPKCS1Verify used
Rem  an incorrect Object Identifier for SHA-1. This implementation was
Rem  cryptographically every bit as secure as the new, corrected version,
Rem  but it was not 100% compatible with the PKCS1 specification. This
Rem  incorrect Object Identifier was used in the following Professional
Rem  BasicCard versions:
Rem
Rem    ZC4.5A REV A, REV B, and REV C
Rem    ZC4.5D REV A, REV B, and REV C
Rem
Rem  and in the development software prior to version 4.51.
Rem
Rem  Our current implementation uses the correct Object Identifier, and is
Rem  therefore PKCS1-compatible. However, it is not compatible with our
Rem  previous implementation. In case there are users who need to retain
Rem  backwards compatibility, we provide here procedures that are functionally
Rem  identical to the old, incorrect implementation. These procedures are
Rem  programmed in ZC-Basic, so you can modify them for your own needs. They
Rem  are:
Rem
Rem    Function OldRsaPKCS1Sign (Hash$, p$, q$, e$, Sig$)
Rem    Function OldRsaPKCS1Verify (Hash$, n$, e$, Sig$)
Rem
Rem  identical to the old functions
Rem
Rem    Function RsaPKCS1Sign (Hash$, p$, q$, e$, Sig$)
Rem    Function RsaPKCS1Verify (Hash$, n$, e$, Sig$)
Rem
Rem  respectively.


Rem  Here is the old, incorrect version of the SHA-1 algorithm object ID:

Eeprom OldRsaPKCS1Digest As String*16 =_
  &H30,34,_
    &H30,10,_
      &H06,6,_
        40*1+3,3,14,3,2,26,_ ' This should be 40*1+3,14,3,2,26
      &H05,0,_
    &H04,20

Rem  The correct version is:
Rem
Rem  Eeprom NewRsaPKCS1Digest As String*15 =_
Rem    &H30,33,_
Rem      &H30,9,_
Rem        &H06,5,_
Rem          40*1+3,14,3,2,26,_
Rem        &H05,0,_
Rem      &H04,20
Rem
Rem  If you have older Professional BasicCards, with the incorrect Object
Rem  Identifier, you can use this string in the following functions to
Rem  implement a correct, PKCS1-compatible version.

Function OldRsaPKCS1Sign (ReadOnly Hash$, ReadOnly p$, ReadOnly q$, ReadOnly e$, Sig$) As Integer
  OldRsaPKCS1Sign =_
    RsaPKCS1SignDigest (OldRsaPKCS1Digest + Hash$, p$, q$, e$, Sig$)
End Function

Function OldRsaPKCS1Verify (ReadOnly Hash$, ReadOnly n$, ReadOnly e$, ReadOnly Sig$) As Integer
  OldRsaPKCS1Verify =_
    RsaPKCS1VerifyDigest (OldRsaPKCS1Digest + Hash$, n$, e$, Sig$)
End Function

#EndIf ' RsaDigDefIncluded
