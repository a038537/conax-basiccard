Rem  MISC.DEF
Rem
Rem  Definition file for library MISC: Miscellaneous procedures
Rem ------------------------------------------------------------------
Rem Copyright (C) 1997-2011 ZeitControl GmbH
Rem Do not edit this file. You have a royalty-free right to use, reproduce and 
Rem distribute this file in any way you find useful, provided that you agree 
Rem that ZeitControl GmbH has no warranty, obligations or liability for it.
Rem ------------------------------------------------------------------
Rem
Rem  Terminal Program:
Rem
Rem    Sub Sleep (ByVal Milliseconds As Long)
Rem    Sub Beep (ByVal Frequency%, ByVal Duration As Long)
Rem    Sub Execute (CommandString$)
Rem    Sub GetDateTime (DT As DateTime)
Rem    Function TimeInterval (ByVal StartTime As DateTime, ByVal EndTime As DateTime) As Long
Rem    Function UnixTime() As Long
Rem    Function CRC16 (S$) As Integer
Rem    Sub UpdateCRC16 (CRC%, S$)
Rem    Function CRC32 (S$) As Long
Rem    Sub UpdateCRC32 (CRC&, S$)
Rem    Function CCITTCRC16 (S$) As Integer
Rem    Sub UpdateCCITTCRC16 (CRC%, S$)
Rem    Function ProtocolType() As Byte
Rem    Function IsPhysicalReader() As Integer
Rem    Sub AddIndexedKey (CID%, Key$)
Rem    Sub DeleteIndexedKey (CID%)
Rem    Sub RandomString (S$, Len%)
Rem
Rem  Enhanced BasicCard:
Rem
Rem    Sub FastEepromWrites()
Rem
Rem  Professional BasicCard:
Rem
Rem    Function RetailMac (ReadOnly DesKey$, ReadOnly IV$, ReadOnly Message$, Padding@) As String
Rem    Sub RetailMacStart (State As RetailMacState, ReadOnly IV$)
Rem    Sub RetailMacUpdate (State As RetailMacState, ReadOnly DesKey$, ReadOnly Message$)
Rem    Function RetailMacEnd (ReadOnly State As RetailMacState, ReadOnly DesKey$, ByVal Padding@) As String
Rem    Sub RandomString (S$, Len%)
Rem    Function LePresent()
Rem    Sub SuspendSW1SW2Processing()
Rem    Function CardSerialNumber() As String
Rem    Function SetProcessorSpeed (Divisor@) As Byte
Rem
Rem  MultiApplication and ZC7.X REV B BasicCards:
Rem
Rem    Sub GetFreeMemory (Mem As FreeMemoryData)

#IfNotDef MiscDefIncluded ' Prevent multiple inclusion
Const MiscDefIncluded = True

Rem  LibError codes

Const MiscCommandTooLong          = &H4001
Const MiscFileNotFound            = &H4002
Const MiscNotExecutable           = &H4003
Const MiscOutOfMemory             = &H4004
Const MiscUnexpectedError         = &H4005
Const MiscBadProcParam            = &H4006
Const MiscRetailMacKeyTooShort    = &H4007
Const MiscRetailMacInvalidIV      = &H4008
Const MiscRetailMacInvalidPadding = &H4009
Const MiscNotImplemented          = &H400A

#IfDef TerminalProgram

Declare Sub &HC0 100 Sleep (ByVal Milliseconds As Long)
Declare Sub &HC0 103 Beep (ByVal Frequency%, ByVal Duration As Long)
Declare Sub &HC0 104 Execute (ReadOnly CommandString$)

Type DateTime
  Year, Month, Day
  Hour, Minute, Second
  Millisecond
End Type

Declare Sub      &HC0 101 GetDateTime (DT As DateTime)
Declare Function &HC0 102 TimeInterval (ByVal StartTime As DateTime, ByVal EndTime As DateTime) As Long
Declare Function &HC0 105 UnixTime() As Long

Declare Sub &HC0 106 UpdateCRC16 (CRC%, ReadOnly S$)
Function CRC16 (ReadOnly S$) As Integer
  CRC16 = 0
  Call UpdateCRC16 (CRC16, S$)
End Function

Declare Sub &HC0 107 UpdateCRC32 (CRC&, ReadOnly S$)
Function CRC32 (ReadOnly S$) As Long
  CRC32 = 0
  Call UpdateCRC32 (CRC32, S$)
End Function

Declare Sub &HC0 109 UpdateCCITTCRC16 (CRC%, ReadOnly S$)
Function CCITTCRC16 (ReadOnly S$) As Integer
  Call UpdateCCITTCRC16 (CCITTCRC16, S$)
End Function

Declare Function &HC0 108 ProtocolType() As Byte
Declare Function &HC0 110 IsPhysicalReader() As Integer

Declare Sub &HC0 150 AddIndexedKey (ByVal CID%, ReadOnly Key$)
Declare Sub &HC0 151 DeleteIndexedKey (ByVal CID%)

Declare Sub &HC0 200 RandomString (S$, ByVal Len%)
Declare Function &HC0 205 InStr (ByVal Start%, ReadOnly S1$, ReadOnly S2$) As Integer

#ElseIfDef EnhancedBasicCard

  #If CardMinorVersion >= 3 And CardMinorVersion <= 6
    #Library MISC.LIB
    Declare Sub FastEepromWrites()
  #EndIf

  #If CardMinorVersion >= 12
    Declare Function SetProcessorSpeed (MHz@) As Byte
  #EndIf

  Function CardSerialNumber() As String

    Rem  Address and length of unique chip data depends on card type

    #If CardMinorVersion = 12 Or CardMinorVersion = 32 Or CardMinorVersion = 42
      Eeprom ReadOnly CSNUniqueChipData As String*8 At &HB105
      CardSerialNumber = CSNUniqueChipData
    #ElseIf CardMinorVersion = 13 Or CardMinorVersion = 33 Or CardMinorVersion = 43 Or CardMinorVersion = 14 Or CardMinorVersion = 34 Or CardMinorVersion = 44 Or CardMinorVersion = 54
        Eeprom ReadOnly CSNUniqueChipData As String*8 At &H0505
        CardSerialNumber = CSNUniqueChipData
    #Else
      #If CardMinorVersion = 7
        Const CSNPrefix$ = "37"
        Eeprom ReadOnly CSNUniqueChipData As String*6 At &H87C9
      #ElseIf CardMinorVersion = 8
        Const CSNPrefix$ = "38"
        Eeprom ReadOnly CSNUniqueChipData As String*6 At &H8FC9
      #ElseIf CardMinorVersion = 9
        Const CSNPrefix$ = "39"
        Eeprom ReadOnly CSNUniqueChipData As String*6 At &H9FC9
      #Else
        Const CSNPrefix$ = "3X"
        Eeprom ReadOnly CSNUniqueChipData As String*6 At &H8009
      #EndIf
      CardSerialNumber = CSNPrefix$ + CSNUniqueChipData
    #EndIf
  End Function

#ElseIfDef ProfessionalBasicCard

  Declare Sub      &HC0 109 UpdateCCITTCRC16 (CRC%, ReadOnly S$) ' in ZC7 series

  #If UpdateCCITTCRC16 ' If library procedure UpdateCCITTCRC16 is available
  Function CCITTCRC16 (ReadOnly S$) As Integer
    Call UpdateCCITTCRC16 (CCITTCRC16, S$)
  End Function
  #EndIf

  Type ProFreeMemoryData
    TotalFreeRam
    LargestFreeRamBlock
    TotalFreeEeprom As Long
    LargestFreeEepromBlock As Long
  End Type

  Declare Sub      &HC0 200 RandomString (S$, ByVal Len%)
  Declare Function &HC0 201 LePresent()
  Declare Sub      &HC0 202 SuspendSW1SW2Processing()
  Declare Function &HC0 203 CardSerialNumber() As String
  Declare Function &HC0 204 SetProcessorSpeed (ByVal Divisor@) As Byte
  Declare Function &HC0 205 InStr (ByVal Start%, ReadOnly S1$, ReadOnly S2$) As Integer
  Declare Sub      &HC0 206 CommParams (Protocol@, Speed@, ExtendedLcLe@)
  Declare Sub      &HC0 220 GetFreeMemory (Mem As ProFreeMemoryData)

#ElseIfDef MultiAppBasicCard

  Type HeapData
    TotalFreeMemory%
    LargestFreeBlock%
  End Type

  #If GenericAddressSize >= 3

    Type LargeHeapData
      TotalFreeMemory&
      LargestFreeBlock&
    End Type

    Type FreeMemoryData
      RamHeapData As HeapData
      AppFileHeapData As LargeHeapData
      EepromHeapData As LargeHeapData
    End Type

  #Else

    Type FreeMemoryData
      RamHeapData As HeapData
      AppFileHeapData As HeapData
      EepromHeapData As HeapData
    End Type

  #EndIf

  Declare Sub      &HC0 200 RandomString (S$, ByVal Len%)
  Declare Function &HC0 201 LePresent()
  Declare Sub      &HC0 202 SuspendSW1SW2Processing()
  Declare Function &HC0 203 CardSerialNumber() As String
  Declare Function &HC0 204 SetProcessorSpeed (ByVal Divisor@) As Byte
  Declare Sub      &HC0 206 CommParams (Protocol@, Speed@, ExtendedLcLe@)
  Declare Sub      &HC0 220 GetFreeMemory (Mem As FreeMemoryData)

  #If CardMajorVersion = 8
    Declare Function &HC0 205 InStr (ByVal Start%, ReadOnly S1$, ReadOnly S2$) As Integer

    Declare Sub &HC0 109 UpdateCCITTCRC16 (CRC%, ReadOnly S$)
    Function CCITTCRC16 (ReadOnly S$) As Integer
      Call UpdateCCITTCRC16 (CCITTCRC16, S$)
    End Function
  #EndIf

#EndIf

#EndIf ' MiscDefIncluded
